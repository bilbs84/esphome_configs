# Include configuration file
<<: !include .ipconfig.yaml

# Define constant variables for use throughout configuration
esphome:
  name: "${pm_device_name}"
  friendly_name: "${pm_friendly_name}"
  project:
    name: "${pm_project_name}"
    version: "${pm_project_version}"
  

preferences:
  flash_write_interval: 1min

# Set up device parameters
esp8266:
  board: esp01_1m

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: !secret printer-main_api

# Enable OTA updates & create password
ota:

# Enable WiFi and passwords
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # use_address: 

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Printer-Main"
    password: !secret bme_ap
  
  # Set static ip address for connection
  manual_ip:
   static_ip: ${pm_ip}
   gateway: ${gateway}
   subnet: ${subnet}
   dns1: ${dns1}

# Configure captive portal in case of no WiFi connection
captive_portal:

# Enable web server component
web_server:
  port: 80
  version: 2

# Set up status sensor
binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

  # Physical button on device
  - platform: gpio
    pin:
      number: 1
      mode: INPUT_PULLUP
      inverted: true
    name: "${pm_friendly_name} Power Button"
    disabled_by_default: true
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - switch.toggle: relay
          - light.toggle: power_led
      - timing:
          - ON for at least 5s
        then:
          - button.press: safe

# Set up sensors          
sensor:
  - platform: uptime
    name: "${pm_friendly_name} Uptime Sensor"
  
  # Power monitoring sensor
  - platform: hlw8012
    sel_pin:
      number: 12
      inverted: true
    cf_pin: 4
    cf1_pin: 5
    voltage_divider: 705
    current_resistor: 0.001
    initial_mode: VOLTAGE
    change_mode_every: 2
    update_interval: 5s
    current:
      name: "HLW8012 Current"
      id: hlw8012_cur
      accuracy_decimals: 3
      filters:
          - calibrate_polynomial:
              degree: 2
              datapoints:
                - 0.0000 -> 0.0110 # Relay off no load
                - 0.0097 -> 0.0260 # Relay on no load
                - 0.0240 -> 0.0520
                - 0.9270 -> 0.7570
                - 2.0133 -> 1.6330
                - 2.9307 -> 2.3750
                - 5.4848 -> 4.4210
                - 8.4308 -> 6.8330
                - 9.9171 -> 7.9830
          # Normalize for plug load
          - lambda: if (x < 0.00360) return 0; else return (x - 0.00360);
    voltage:
      name: "HLW8012 Voltage"
      id: hlw8012_volt
      accuracy_decimals: 2
    
    power:
      name: "HLW8012 Power"
      id: hlw8012_pwr
      accuracy_decimals: 2
      filters:
          - calibrate_linear:
            - 0.0000 -> 0.5900 # Relay off no load
            - 0.0000 -> 1.5600 # Relay on no load
            - 198.5129 -> 87.8300
            - 434.2469 -> 189.5000
            - 628.6241 -> 273.9000
            - 1067.0067 -> 460.1000
            - 1619.8098 -> 699.2000
            - 2043.0282 -> 885.0000
          # Normalize for plug load
          - lambda: if (x < 0.7600) return 0; else return (x - 0.7600);
    energy:
      name: "HLW8012 Energy"

  - platform: template
    name: "HLW8012 Apparent Power"
    id: apparent
    icon: mdi:flash
    unit_of_measurement: VA
    accuracy_decimals: 2
    lambda: |-
      { return id(hlw8012_volt).state * id(hlw8012_cur).state; }
    update_interval: 5s

  - platform: template
    name: "HLW8012 Reactive Power"
    id: reactive
    icon: mdi:flash
    unit_of_measurement: VAr
    accuracy_decimals: 2
    lambda: |-
      { return sqrt((id(apparent).state * id(apparent).state) - (id(hlw8012_pwr).state * id(hlw8012_pwr).state)); }
    update_interval: 5s

  - platform: template
    name: "HLW8012 Power Factor"
    id: pfactor
    icon: mdi:alpha-f-circle-outline
    accuracy_decimals: 2
    lambda: |-
      { return id(hlw8012_pwr).state / (id(hlw8012_volt).state * id(hlw8012_cur).state); }
    update_interval: 5s

  - platform: total_daily_energy
    name: "${pm_friendly_name} Total Daily Energy"
    power_id: hlw8012_pwr
    unit_of_measurement: kWh
    filters:
      - multiply: 0.001

button:
  - platform: factory_reset
    name: "Restart with Factory Default Settings"
    id: Reset
    
  - platform: safe_mode
    name: "Safe Mode"
    id: safe
    internal: false

switch:
  - platform: gpio
    name: "${pm_friendly_name}"
    pin: 13
    id: relay
    icon: mdi:light-recessed
    restore_mode: ${pm_relay_restore_mode}
    on_turn_on:
      then:
        - light.turn_on: power_led
    on_turn_off:
      then:
        - light.turn_off: power_led
  - platform: template
    name: LED Indicator
    id: led_indicator
    internal: True
    turn_on_action:
      - while:
          condition:
            switch.is_on: relay
          then:
            - light.turn_on: power_led  
  

output:
  - platform: esp8266_pwm
    id: pwr_led
    pin:
      number: 14
      inverted: False

light:
  - platform: status_led
    name: "${pm_friendly_name} Status LED"
    id: blue_led
    disabled_by_default: true
    internal: True
    pin:
      inverted: False
      number: 3
  - platform: monochromatic
    name: "${pm_friendly_name} Power LED"
    id: power_led
    output: pwr_led
    restore_mode: ${pm_relay_restore_mode}


text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
    ssid:
      name: "Connected SSID"
    mac_address:
      name: "Mac Address"
     
time:
  - platform: sntp
    id: sntp_time

    